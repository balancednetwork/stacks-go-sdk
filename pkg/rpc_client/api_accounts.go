/*
Stacks 2.0+ RPC API

This is the documentation for the `stacks-node` RPC interface. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpc_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AccountsAPIService AccountsAPI service
type AccountsAPIService service

type ApiGetAccountInfoRequest struct {
	ctx context.Context
	ApiService *AccountsAPIService
	principal string
	proof *int32
	tip *string
}

// Returns object without the proof field if set to 0
func (r ApiGetAccountInfoRequest) Proof(proof int32) ApiGetAccountInfoRequest {
	r.proof = &proof
	return r
}

// The Stacks chain tip to query from. If tip &#x3D;&#x3D; latest, the query will be run from the latest known tip (includes unconfirmed state).
func (r ApiGetAccountInfoRequest) Tip(tip string) ApiGetAccountInfoRequest {
	r.tip = &tip
	return r
}

func (r ApiGetAccountInfoRequest) Execute() (*GetAccountDataschema, *http.Response, error) {
	return r.ApiService.GetAccountInfoExecute(r)
}

/*
GetAccountInfo Get account info

Get the account data for the provided principal

Where balance is the hex encoding of a unsigned 128-bit integer (big-endian), nonce is a unsigned 64-bit integer, and the proofs are provided as hex strings.

For non-existent accounts, this does not 404, rather it returns an object with balance and nonce of 0.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param principal Stacks address or a Contract identifier (e.g. `SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info`)
 @return ApiGetAccountInfoRequest
*/
func (a *AccountsAPIService) GetAccountInfo(ctx context.Context, principal string) ApiGetAccountInfoRequest {
	return ApiGetAccountInfoRequest{
		ApiService: a,
		ctx: ctx,
		principal: principal,
	}
}

// Execute executes the request
//  @return GetAccountDataschema
func (a *AccountsAPIService) GetAccountInfoExecute(r ApiGetAccountInfoRequest) (*GetAccountDataschema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAccountDataschema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsAPIService.GetAccountInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/accounts/{principal}"
	localVarPath = strings.Replace(localVarPath, "{"+"principal"+"}", url.PathEscape(parameterValueToString(r.principal, "principal")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.proof != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "proof", r.proof, "form", "")
	}
	if r.tip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tip", r.tip, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
