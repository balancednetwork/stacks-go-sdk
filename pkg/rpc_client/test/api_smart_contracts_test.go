/*
Stacks 2.0+ RPC API

Testing SmartContractsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rpc_client

import (
	"context"
	"encoding/hex"
	"testing"

	"github.com/icon-project/stacks-go-sdk/pkg/clarity"
	"github.com/icon-project/stacks-go-sdk/pkg/rpc_client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_rpc_client_SmartContractsAPIService(t *testing.T) {

	configuration := rpc_client.NewConfiguration()
	apiClient := rpc_client.NewAPIClient(configuration)
	contractAddress := "ST15C893XJFJ6FSKM020P9JQDB5T7X6MQTXMBPAVH"
	contractName := "contract_name"
	functionName := "address-string-to-principal"

	strArg, _ := clarity.NewStringASCII("test")
	encodedStrArg, _ := strArg.Serialize()
	hexEncodedStrArg := hex.EncodeToString(encodedStrArg)

	t.Run("Test SmartContractsAPIService CallReadOnlyFunction", func(t *testing.T) {
		functionArgs := rpc_client.NewReadOnlyFunctionArgsschema(
			"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM",
			[]string{hexEncodedStrArg},
		)

		ctx := context.WithValue(context.Background(), rpc_client.ContextServerIndex, 1)
		resp, httpRes, err := apiClient.SmartContractsAPI.CallReadOnlyFunction(ctx, contractAddress, contractName, functionName).ReadOnlyFunctionArgsschema(*functionArgs).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SmartContractsAPIService GetConstantVal", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var contractAddress string
		var contractName string
		var constantName string

		resp, httpRes, err := apiClient.SmartContractsAPI.GetConstantVal(context.Background(), contractAddress, contractName, constantName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SmartContractsAPIService GetContractDataMapEntry", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var contractAddress string
		var contractName string
		var mapName string

		ctx := context.WithValue(context.Background(), rpc_client.ContextServerIndex, 1)
		resp, httpRes, err := apiClient.SmartContractsAPI.GetContractDataMapEntry(ctx, contractAddress, contractName, mapName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SmartContractsAPIService GetContractInterface", func(t *testing.T) {
		ctx := context.WithValue(context.Background(), rpc_client.ContextServerIndex, 1)
		resp, httpRes, err := apiClient.SmartContractsAPI.GetContractInterface(ctx, contractAddress, contractName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SmartContractsAPIService GetContractSource", func(t *testing.T) {
		ctx := context.WithValue(context.Background(), rpc_client.ContextServerIndex, 1)
		resp, httpRes, err := apiClient.SmartContractsAPI.GetContractSource(ctx, contractAddress, contractName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SmartContractsAPIService GetIsTraitImplemented", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var contractAddress string
		var contractName string
		var traitContractAddress string
		var traitContractName string
		var traitName string

		resp, httpRes, err := apiClient.SmartContractsAPI.GetIsTraitImplemented(context.Background(), contractAddress, contractName, traitContractAddress, traitContractName, traitName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
