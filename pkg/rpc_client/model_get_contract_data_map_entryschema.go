/*
Stacks 2.0+ RPC API

This is the documentation for the `stacks-node` RPC interface. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpc_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetContractDataMapEntryschema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetContractDataMapEntryschema{}

// GetContractDataMapEntryschema Response of get data map entry request
type GetContractDataMapEntryschema struct {
	// Hex-encoded string of clarity value. It is always an optional tuple.
	Data string `json:"data"`
	// Hex-encoded string of the MARF proof for the data
	Proof *string `json:"proof,omitempty"`
}

type _GetContractDataMapEntryschema GetContractDataMapEntryschema

// NewGetContractDataMapEntryschema instantiates a new GetContractDataMapEntryschema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetContractDataMapEntryschema(data string) *GetContractDataMapEntryschema {
	this := GetContractDataMapEntryschema{}
	this.Data = data
	return &this
}

// NewGetContractDataMapEntryschemaWithDefaults instantiates a new GetContractDataMapEntryschema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetContractDataMapEntryschemaWithDefaults() *GetContractDataMapEntryschema {
	this := GetContractDataMapEntryschema{}
	return &this
}

// GetData returns the Data field value
func (o *GetContractDataMapEntryschema) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *GetContractDataMapEntryschema) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *GetContractDataMapEntryschema) SetData(v string) {
	o.Data = v
}

// GetProof returns the Proof field value if set, zero value otherwise.
func (o *GetContractDataMapEntryschema) GetProof() string {
	if o == nil || IsNil(o.Proof) {
		var ret string
		return ret
	}
	return *o.Proof
}

// GetProofOk returns a tuple with the Proof field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetContractDataMapEntryschema) GetProofOk() (*string, bool) {
	if o == nil || IsNil(o.Proof) {
		return nil, false
	}
	return o.Proof, true
}

// HasProof returns a boolean if a field has been set.
func (o *GetContractDataMapEntryschema) HasProof() bool {
	if o != nil && !IsNil(o.Proof) {
		return true
	}

	return false
}

// SetProof gets a reference to the given string and assigns it to the Proof field.
func (o *GetContractDataMapEntryschema) SetProof(v string) {
	o.Proof = &v
}

func (o GetContractDataMapEntryschema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetContractDataMapEntryschema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	if !IsNil(o.Proof) {
		toSerialize["proof"] = o.Proof
	}
	return toSerialize, nil
}

func (o *GetContractDataMapEntryschema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetContractDataMapEntryschema := _GetContractDataMapEntryschema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetContractDataMapEntryschema)

	if err != nil {
		return err
	}

	*o = GetContractDataMapEntryschema(varGetContractDataMapEntryschema)

	return err
}

type NullableGetContractDataMapEntryschema struct {
	value *GetContractDataMapEntryschema
	isSet bool
}

func (v NullableGetContractDataMapEntryschema) Get() *GetContractDataMapEntryschema {
	return v.value
}

func (v *NullableGetContractDataMapEntryschema) Set(val *GetContractDataMapEntryschema) {
	v.value = val
	v.isSet = true
}

func (v NullableGetContractDataMapEntryschema) IsSet() bool {
	return v.isSet
}

func (v *NullableGetContractDataMapEntryschema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetContractDataMapEntryschema(val *GetContractDataMapEntryschema) *NullableGetContractDataMapEntryschema {
	return &NullableGetContractDataMapEntryschema{value: val, isSet: true}
}

func (v NullableGetContractDataMapEntryschema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetContractDataMapEntryschema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


