/*
Stacks 2.0+ RPC API

This is the documentation for the `stacks-node` RPC interface. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rpc_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetContractSourceschema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetContractSourceschema{}

// GetContractSourceschema GET request to get contract source
type GetContractSourceschema struct {
	Source string `json:"source"`
	PublishHeight int32 `json:"publish_height"`
	Proof string `json:"proof"`
}

type _GetContractSourceschema GetContractSourceschema

// NewGetContractSourceschema instantiates a new GetContractSourceschema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetContractSourceschema(source string, publishHeight int32, proof string) *GetContractSourceschema {
	this := GetContractSourceschema{}
	this.Source = source
	this.PublishHeight = publishHeight
	this.Proof = proof
	return &this
}

// NewGetContractSourceschemaWithDefaults instantiates a new GetContractSourceschema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetContractSourceschemaWithDefaults() *GetContractSourceschema {
	this := GetContractSourceschema{}
	return &this
}

// GetSource returns the Source field value
func (o *GetContractSourceschema) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *GetContractSourceschema) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *GetContractSourceschema) SetSource(v string) {
	o.Source = v
}

// GetPublishHeight returns the PublishHeight field value
func (o *GetContractSourceschema) GetPublishHeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PublishHeight
}

// GetPublishHeightOk returns a tuple with the PublishHeight field value
// and a boolean to check if the value has been set.
func (o *GetContractSourceschema) GetPublishHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublishHeight, true
}

// SetPublishHeight sets field value
func (o *GetContractSourceschema) SetPublishHeight(v int32) {
	o.PublishHeight = v
}

// GetProof returns the Proof field value
func (o *GetContractSourceschema) GetProof() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Proof
}

// GetProofOk returns a tuple with the Proof field value
// and a boolean to check if the value has been set.
func (o *GetContractSourceschema) GetProofOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Proof, true
}

// SetProof sets field value
func (o *GetContractSourceschema) SetProof(v string) {
	o.Proof = v
}

func (o GetContractSourceschema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetContractSourceschema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	toSerialize["publish_height"] = o.PublishHeight
	toSerialize["proof"] = o.Proof
	return toSerialize, nil
}

func (o *GetContractSourceschema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
		"publish_height",
		"proof",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetContractSourceschema := _GetContractSourceschema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetContractSourceschema)

	if err != nil {
		return err
	}

	*o = GetContractSourceschema(varGetContractSourceschema)

	return err
}

type NullableGetContractSourceschema struct {
	value *GetContractSourceschema
	isSet bool
}

func (v NullableGetContractSourceschema) Get() *GetContractSourceschema {
	return v.value
}

func (v *NullableGetContractSourceschema) Set(val *GetContractSourceschema) {
	v.value = val
	v.isSet = true
}

func (v NullableGetContractSourceschema) IsSet() bool {
	return v.isSet
}

func (v *NullableGetContractSourceschema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetContractSourceschema(val *GetContractSourceschema) *NullableGetContractSourceschema {
	return &NullableGetContractSourceschema{value: val, isSet: true}
}

func (v NullableGetContractSourceschema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetContractSourceschema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


