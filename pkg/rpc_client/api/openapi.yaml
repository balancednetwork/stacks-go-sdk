openapi: 3.0.2
info:
  description: |
    This is the documentation for the `stacks-node` RPC interface.
  title: Stacks 2.0+ RPC API
  version: 1.0.0
servers:
- description: Local
  url: http://localhost:20443
paths:
  /v2/transactions:
    post:
      description: "Broadcast raw transactions on the network. You can use the [@stacks/transactions](https://github.com/blockstack/stacks.js)\
        \ project to generate a raw transaction payload."
      operationId: post_core_node_transactions
      requestBody:
        content:
          application/octet-stream:
            example: !!binary |-
              YmluYXJ5IGZvcm1hdCBvZiAwMDAwMDAwMDAxMDQwMGJlZDM4YzJhYWRmZmEzNDg5MzFiY2I1NDI4
              ODBmZjc5ZDYwN2FmZWMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBjODAwMDEyYjBiMWZm
              ZjZjY2NkMDk3NDk2NmRjZDY2NTgzNTgzOGYwOTg1YmU1MDhlMTMyMmUwOWZiM2Q3NTFlY2ExMzJj
              NDkyYmRhNzIwZjllZjE3NjhkMTRmZGFiZWQ2MTI3NTYwYmE1MmQ1ZTNhYzQ3MGRjYjYwYjc4NGU5
              N2RjODhjOTAzMDIwMDAwMDAwMDAwMDUxNmRmMGJhM2U3OTc5MmJlN2JlNWU1MGEzNzAyODlhY2Nm
              YzhjOWUwMzIwMDAwMDAwMDAwMDAzMDM5NzQ2NTczNzQyMDZkNjU2ZDZmMDAwMDAwMDAwMDAwMDAw
              MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA=
            schema:
              format: binary
              type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: '"e161978626f216b2141b156ade10501207ae535fa365a13ef5d7a7c9310a09f2"'
                type: string
          description: Transaction id of successful post of a raw tx to the node's
            mempool
        "400":
          content:
            application/json:
              example:
                $ref: ./api/transaction/post-core-node-transactions-error.example.json
              schema:
                $ref: '#/components/schemas/post-core-node-transactions-errorschema'
          description: Rejections result in a 400 error
      summary: Broadcast raw transaction
      tags:
      - Transactions
  /v2/burn_ops/{burn_height}/{op_type}:
    get:
      description: "Get all burn operations of type `op_type` successfully read at\
        \ `burn_height`. Valid `op_type`s are `peg_in`, `peg_out_request` and `peg_out_fulfill`."
      operationId: get_burn_ops
      parameters:
      - description: height of the burnchain (Bitcoin)
        explode: false
        in: path
        name: burn_height
        required: true
        schema:
          type: integer
        style: simple
      - description: name of the burnchain operation type
        explode: false
        in: path
        name: op_type
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                peg_in:
                  value:
                    $ref: ./api/core-node/get-burn-ops-peg-in.example.json
                peg_out_request:
                  value:
                    $ref: ./api/core-node/get-burn-ops-peg-out-request.example.json
                peg_out_fulfill:
                  value:
                    $ref: ./api/core-node/get-burn-ops-peg-out-fulfill.example.json
          description: Burn operations list
      summary: Get burn operations
      tags:
      - Info
  /v2/contracts/interface/{contract_address}/{contract_name}:
    get:
      description: Get contract interface using a `contract_address` and `contract
        name`
      operationId: get_contract_interface
      parameters:
      - description: Stacks address
        explode: false
        in: path
        name: contract_address
        required: true
        schema:
          type: string
        style: simple
      - description: Contract name
        explode: false
        in: path
        name: contract_name
        required: true
        schema:
          type: string
        style: simple
      - description: "The Stacks chain tip to query from. If tip == latest, the query\
          \ will be run from the latest known tip (includes unconfirmed state)."
        explode: true
        in: query
        name: tip
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                $ref: ./api/core-node/get-contract-interface.example.json
              schema:
                $ref: '#/components/schemas/get-contract-interfaceschema'
          description: Contract interface
      summary: Get contract interface
      tags:
      - Smart Contracts
  /v2/map_entry/{contract_address}/{contract_name}/{map_name}:
    post:
      description: |
        Attempt to fetch data from a contract data map. The contract is identified with [Stacks Address] and [Contract Name] in the URL path. The map is identified with [Map Name].

        The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.

        In the response, `data` is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object.
      operationId: get_contract_data_map_entry
      parameters:
      - description: Stacks address
        explode: false
        in: path
        name: contract_address
        required: true
        schema:
          type: string
        style: simple
      - description: Contract name
        explode: false
        in: path
        name: contract_name
        required: true
        schema:
          type: string
        style: simple
      - description: Map name
        explode: false
        in: path
        name: map_name
        required: true
        schema:
          type: string
        style: simple
      - description: Returns object without the proof field when set to 0
        explode: true
        in: query
        name: proof
        required: false
        schema:
          type: integer
        style: form
      - description: "The Stacks chain tip to query from. If tip == latest, the query\
          \ will be run from the latest known tip (includes unconfirmed state)."
        explode: true
        in: query
        name: tip
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Hex string serialization of the lookup key (which should be a
          Clarity value)
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                $ref: ./api/core-node/get-contract-data-map-entry.example.json
              schema:
                $ref: '#/components/schemas/get-contract-data-map-entryschema'
          description: Success
        "400":
          description: Failed loading data map
      summary: Get specific data-map inside a contract
      tags:
      - Smart Contracts
      x-codegen-request-body-name: key
  /v2/contracts/source/{contract_address}/{contract_name}:
    get:
      description: "Returns the Clarity source code of a given contract, along with\
        \ the block height it was published in, and the MARF proof for the data"
      operationId: get_contract_source
      parameters:
      - description: Stacks address
        explode: false
        in: path
        name: contract_address
        required: true
        schema:
          type: string
        style: simple
      - description: Contract name
        explode: false
        in: path
        name: contract_name
        required: true
        schema:
          type: string
        style: simple
      - description: Returns object without the proof field if set to 0
        explode: true
        in: query
        name: proof
        required: false
        schema:
          type: integer
        style: form
      - description: "The Stacks chain tip to query from. If tip == latest, the query\
          \ will be run from the latest known tip (includes unconfirmed state)."
        explode: true
        in: query
        name: tip
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                $ref: ./api/core-node/get-contract-source.example.json
              schema:
                $ref: '#/components/schemas/get-contract-sourceschema'
          description: Success
      summary: Get contract source
      tags:
      - Smart Contracts
  /v2/contracts/call-read/{contract_address}/{contract_name}/{function_name}:
    post:
      description: |
        Call a read-only public function on a given smart contract.

        The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format:
      operationId: call_read_only_function
      parameters:
      - description: Stacks address
        explode: false
        in: path
        name: contract_address
        required: true
        schema:
          type: string
        style: simple
      - description: Contract name
        explode: false
        in: path
        name: contract_name
        required: true
        schema:
          type: string
        style: simple
      - description: Function name
        explode: false
        in: path
        name: function_name
        required: true
        schema:
          type: string
        style: simple
      - description: "The Stacks chain tip to query from. If tip == latest, the query\
          \ will be run from the latest known tip (includes unconfirmed state)."
        explode: true
        in: query
        name: tip
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/read-only-function-argsschema'
        description: "map of arguments and the simulated tx-sender where sender is\
          \ either a Contract identifier or a normal Stacks address, and arguments\
          \ is an array of hex serialized Clarity values."
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/post-call-read-only-fn-successexample'
                fail:
                  $ref: '#/components/examples/post-call-read-only-fn-failexample'
              schema:
                $ref: '#/components/schemas/post-call-read-only-fnschema'
          description: Success
      summary: Call read-only function
      tags:
      - Smart Contracts
  /v2/accounts/{principal}:
    get:
      description: |
        Get the account data for the provided principal

        Where balance is the hex encoding of a unsigned 128-bit integer (big-endian), nonce is a unsigned 64-bit integer, and the proofs are provided as hex strings.

        For non-existent accounts, this does not 404, rather it returns an object with balance and nonce of 0.
      operationId: get_account_info
      parameters:
      - description: Stacks address or a Contract identifier (e.g. `SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info`)
        explode: false
        in: path
        name: principal
        required: true
        schema:
          type: string
        style: simple
      - description: Returns object without the proof field if set to 0
        explode: true
        in: query
        name: proof
        required: false
        schema:
          type: integer
        style: form
      - description: "The Stacks chain tip to query from. If tip == latest, the query\
          \ will be run from the latest known tip (includes unconfirmed state)."
        explode: true
        in: query
        name: tip
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                $ref: ./api/core-node/get-account-data.example.json
              schema:
                $ref: '#/components/schemas/get-account-dataschema'
          description: Success
      summary: Get account info
      tags:
      - Accounts
  /v2/fees/transaction:
    post:
      description: |
        Get an estimated fee for the supplied transaction.  This
        estimates the execution cost of the transaction, the current
        fee rate of the network, and returns estimates for fee
        amounts.

        * `transaction_payload` is a hex-encoded serialization of
          the TransactionPayload for the transaction.
        * `estimated_len` is an optional argument that provides the
          endpoint with an estimation of the final length (in bytes)
          of the transaction, including any post-conditions and
          signatures

        If the node cannot provide an estimate for the transaction
        (e.g., if the node has never seen a contract-call for the
        given contract and function) or if estimation is not
        configured on this node, a 400 response is returned.
        The 400 response will be a JSON error containing a `reason`
        field which can be one of the following:

        * `DatabaseError` - this Stacks node has had an internal
          database error while trying to estimate the costs of the
          supplied transaction.
        * `NoEstimateAvailable` - this Stacks node has not seen this
          kind of contract-call before, and it cannot provide an
          estimate yet.
        * `CostEstimationDisabled` - this Stacks node does not perform
          fee or cost estimation, and it cannot respond on this
          endpoint.

        The 200 response contains the following data:

        * `estimated_cost` - the estimated multi-dimensional cost of
          executing the Clarity VM on the provided transaction.
        * `estimated_cost_scalar` - a unitless integer that the Stacks
          node uses to compare how much of the block limit is consumed
          by different transactions. This value incorporates the
          estimated length of the transaction and the estimated
          execution cost of the transaction. The range of this integer
          may vary between different Stacks nodes. In order to compute
          an estimate of total fee amount for the transaction, this
          value is multiplied by the same Stacks node's estimated fee
          rate.
        * `cost_scalar_change_by_byte` - a float value that indicates how
          much the `estimated_cost_scalar` value would increase for every
          additional byte in the final transaction.
        * `estimations` - an array of estimated fee rates and total fees to
          pay in microSTX for the transaction. This array provides a range of
          estimates (default: 3) that may be used. Each element of the array
          contains the following fields:
            * `fee_rate` - the estimated value for the current fee
              rates in the network
            * `fee` - the estimated value for the total fee in
              microSTX that the given transaction should pay. These
              values are the result of computing:
              `fee_rate` x `estimated_cost_scalar`.
              If the estimated fees are less than the minimum relay
              fee `(1 ustx x estimated_len)`, then that minimum relay
              fee will be returned here instead.


        Note: If the final transaction's byte size is larger than
        supplied to `estimated_len`, then applications should increase
        this fee amount by:

          `fee_rate` x `cost_scalar_change_by_byte` x (`final_size` - `estimated_size`)
      operationId: post_fee_transaction
      requestBody:
        content:
          application/json:
            example:
              $ref: ./api/core-node/post-fee-transaction.example.json
            schema:
              $ref: '#/components/schemas/post-fee-transactionschema'
      responses:
        "200":
          content:
            application/json:
              example:
                $ref: ./api/core-node/post-fee-transaction-response.example.json
              schema:
                $ref: '#/components/schemas/post-fee-transaction-responseschema'
          description: Estimated fees for the transaction
      summary: Get approximate fees for the given transaction
      tags:
      - Fees
  /v2/fees/transfer:
    get:
      description: "Get an estimated fee rate for STX transfer transactions. This\
        \ a a fee rate / byte, and is returned as a JSON integer"
      operationId: get_fee_transfer
      responses:
        "200":
          content:
            application/json:
              example:
                $ref: ./api/core-node/get-fee-transfer.example.json
              schema:
                $ref: '#/components/schemas/get-fee-transferschema'
          description: Success
      summary: Get estimated fee
      tags:
      - Fees
  /v2/info:
    get:
      description: Get Core API information
      operationId: get_core_api_info
      responses:
        "200":
          content:
            application/json:
              example:
                $ref: ./api/core-node/get-info.example.json
              schema:
                $ref: '#/components/schemas/get-infoschema'
          description: Success
      summary: Get Core API info
      tags:
      - Info
  /v2/pox:
    get:
      description: Get Proof of Transfer (PoX) information. Can be used for Stacking.
      operationId: get_pox_info
      parameters:
      - description: "The Stacks chain tip to query from. If tip == latest, the query\
          \ will be run from the latest known tip (includes unconfirmed state)."
        explode: true
        in: query
        name: tip
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                $ref: ./api/core-node/get-pox.example.json
              schema:
                $ref: '#/components/schemas/get-poxschema'
          description: Success
      summary: Get PoX details
      tags:
      - Info
  /v2/traits/{contract_address}/{contract_name}/{trait_contract_address}/{trait_contract_name}/{trait_name}:
    get:
      description: Determine whether or not a specified trait is implemented (either
        explicitly or implicitly) within a given contract.
      operationId: get_is_trait_implemented
      parameters:
      - description: Stacks address
        explode: false
        in: path
        name: contract_address
        required: true
        schema:
          type: string
        style: simple
      - description: Contract name
        explode: false
        in: path
        name: contract_name
        required: true
        schema:
          type: string
        style: simple
      - description: Trait Stacks address
        explode: false
        in: path
        name: trait_contract_address
        required: true
        schema:
          type: string
        style: simple
      - description: Trait contract name
        explode: false
        in: path
        name: trait_contract_name
        required: true
        schema:
          type: string
        style: simple
      - description: Trait name
        explode: false
        in: path
        name: trait_name
        required: true
        schema:
          type: string
        style: simple
      - description: "The Stacks chain tip to query from.\nIf tip == \"latest\", the\
          \ query will be run from the latest known tip (includes unconfirmed state).\n\
          If the tip is left unspecified, the stacks chain tip will be selected (only\
          \ includes confirmed state). \n"
        explode: true
        in: query
        name: tip
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                $ref: ./api/trait/get-is-trait-implemented.example.json
              schema:
                $ref: ./api/trait/get-is-trait-implemented.schema.json
          description: Success
      summary: Get trait implementation details
      tags:
      - Smart Contracts
  /v2/constant_val/{contract_address}/{contract_name}/{constant_name}:
    post:
      description: |
        Attempt to fetch the value of a constant inside a contract. The contract is identified with [Stacks Address] and [Contract Name] in the URL path. The constant is identified with [Constant Name].

        In the response, `data` is the hex serialization of the constant value.
      operationId: get_constant_val
      parameters:
      - description: Stacks address
        explode: false
        in: path
        name: contract_address
        required: true
        schema:
          type: string
        style: simple
      - description: Contract name
        explode: false
        in: path
        name: contract_name
        required: true
        schema:
          type: string
        style: simple
      - description: Constant name
        explode: false
        in: path
        name: constant_name
        required: true
        schema:
          type: string
        style: simple
      - description: "The Stacks chain tip to query from. If tip == latest, the query\
          \ will be run from the latest known tip (includes unconfirmed state)."
        explode: true
        in: query
        name: tip
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                $ref: ./api/core-node/get-constant-val.example.json
              schema:
                $ref: ./api/core-node/get-constant-val.schema.json
          description: Success
        "400":
          description: Failed to retrieve constant value from contract
      summary: Get the value of a constant inside a contract
      tags:
      - Smart Contracts
  /v2/block_proposal:
    post:
      description: |
        Used by stackers to validate a proposed Stacks block from a miner.

        **This API endpoint requires a basic Authorization header.**
      operationId: post_block_proposal
      requestBody:
        content:
          application/json:
            example:
              $ref: ./api/core-node/post-block-proposal-req.example.json
      responses:
        "202":
          content:
            application/json:
              example:
                $ref: ./api/core-node/post-block-proposal-response.example.json
          description: Block proposal has been accepted for processing. The result
            will be returned via the event observer.
        "403":
          description: Request not over loopback interface
        "429":
          content:
            application/json:
              example:
                $ref: ./api/core-node/post-block-proposal-response.429.json
          description: "There is an ongoing proposal validation being processed, the\
            \ new request cannot be accepted until the prior request has been processed."
      summary: Validate a proposed Stacks block
      tags:
      - Mining
  /v2/stacker_set/{cycle_number}:
    get:
      description: |
        Used to get stacker and signer set information for a given cycle.

        This will only return information for cycles started in Epoch-2.5 where PoX-4 was active and subsequent cycles.
      operationId: get_stacker_set
      parameters:
      - description: reward cycle number
        explode: false
        in: path
        name: cycle_number
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                $ref: ./api/core-node/get_stacker_set.example.json
          description: Information for the given reward cycle
        "400":
          content:
            application/json:
              example:
                $ref: ./api/core-node/get_stacker_set.400.example.json
          description: Could not fetch the given reward set
      summary: Fetch the stacker and signer set information for a given cycle.
      tags:
      - Mining
  /v3/blocks/{block_id}:
    get:
      description: Fetch a Nakamoto block by its index block hash.
      operationId: get_block_v3
      parameters:
      - description: The block's ID hash
        explode: false
        in: path
        name: block_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: The raw SIP-003-encoded block will be returned.
        "404":
          content:
            application/text-plain: {}
          description: The block could not be found
      summary: Fetch a Nakamoto block
      tags:
      - Blocks
  /v3/tenures/info:
    get:
      description: "Fetch metadata about the ongoing Nakamoto tenure. This information\
        \ is sufficient to obtain and authenticate the highest complete tenure, as\
        \ well as obtain new tenure blocks."
      operationId: get_tenure_info
      responses:
        "200":
          content:
            application/json:
              example:
                $ref: ./api/core-node/get_tenure_info.json
          description: Metadata about the ongoing tenure
      summary: Fetch metadata about the ongoing Nakamoto tenure
      tags:
      - Blocks
  /v3/tenures/{block_id}:
    get:
      description: "Fetch a sequence of Nakamoto blocks in a tenure.  The blocks will\
        \ be served in order from highest to lowest.  The blocks will be encoded in\
        \ their SIP-003 wire format, and concatenated together."
      operationId: get_tenures
      parameters:
      - description: The tenure-start block ID of the tenure to query
        explode: false
        in: path
        name: block_id
        required: true
        schema:
          type: string
        style: simple
      - description: The block ID hash of the highest block in this tenure that is
          already known to the caller.  Neither the corresponding block nor any of
          its ancestors will be served.  This is used to fetch tenure blocks that
          the caller does not have.
        explode: true
        in: query
        name: stop
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: "SIP-003-encoded Nakamoto blocks, concatenated together"
      summary: Fetch a sequence of Nakamoto blocks in a tenure
      tags:
      - Blocks
    parameters:
    - description: The tenure-start block ID of the tenure to query
      explode: false
      in: path
      name: block_id
      required: true
      schema:
        type: string
      style: simple
    - description: The block ID hash of the highest block in this tenure that is already
        known to the caller.  Neither the corresponding block nor any of its ancestors
        will be served.  This is used to fetch tenure blocks that the caller does
        not have.
      explode: true
      in: query
      name: stop
      required: false
      schema:
        type: string
      style: form
components:
  examples:
    post-call-read-only-fn-successexample: {}
    post-call-read-only-fn-failexample: {}
  schemas:
    post-core-node-transactions-errorschema:
      description: GET request that returns transactions
      example:
        reason: reason
        txid: txid
        error: error
        reason_data: "{}"
      properties:
        error:
          description: The error
          type: string
        reason:
          description: The reason for the error
          type: string
        reason_data:
          description: More details about the reason
          type: object
        txid:
          description: The relevant transaction id
          type: string
      required:
      - error
      - reason
      - reason_data
      - txid
      title: PostCoreNodeTransactionsError
      type: object
    get-contract-interfaceschema:
      description: GET request to get contract interface
      example:
        variables:
        - "{}"
        - "{}"
        functions:
        - "{}"
        - "{}"
        maps:
        - "{}"
        - "{}"
        non_fungible_tokens:
        - "{}"
        - "{}"
        fungible_tokens:
        - "{}"
        - "{}"
      properties:
        functions:
          description: List of defined methods
          items:
            type: object
          type: array
        variables:
          description: List of defined variables
          items:
            type: object
          type: array
        maps:
          description: List of defined data-maps
          items:
            type: object
          type: array
        fungible_tokens:
          description: List of fungible tokens in the contract
          items:
            type: object
          type: array
        non_fungible_tokens:
          description: List of non-fungible tokens in the contract
          items:
            type: object
          type: array
      required:
      - functions
      - fungible_tokens
      - maps
      - non_fungible_tokens
      - variables
      title: ContractInterfaceResponse
      type: object
    get-contract-data-map-entryschema:
      description: Response of get data map entry request
      example:
        data: data
        proof: proof
      properties:
        data:
          description: Hex-encoded string of clarity value. It is always an optional
            tuple.
          type: string
        proof:
          description: Hex-encoded string of the MARF proof for the data
          type: string
      required:
      - data
      title: MapEntryResponse
      type: object
    get-contract-sourceschema:
      additionalProperties: false
      description: GET request to get contract source
      example:
        publish_height: 0
        source: source
        proof: proof
      properties:
        source:
          type: string
        publish_height:
          type: integer
        proof:
          type: string
      required:
      - proof
      - publish_height
      - source
      title: ContractSourceResponse
      type: object
    read-only-function-argsschema:
      description: Describes representation of a Type-0 Stacks 2.0 transaction. https://github.com/blockstack/stacks-blockchain/blob/master/sip/sip-005-blocks-and-transactions.md#type-0-transferring-an-asset
      properties:
        sender:
          description: The simulated tx-sender
          type: string
        arguments:
          description: An array of hex serialized Clarity values
          items:
            type: string
          type: array
      required:
      - arguments
      - sender
      title: ReadOnlyFunctionArgs
      type: object
    post-call-read-only-fnschema:
      additionalProperties: false
      description: GET request to get contract source
      example:
        okay: true
        result: result
        cause: cause
      properties:
        okay:
          type: boolean
        result:
          type: string
        cause:
          type: string
      required:
      - okay
      title: ReadOnlyFunctionSuccessResponse
      type: object
    get-account-dataschema:
      additionalProperties: false
      description: GET request for account data
      example:
        balance: balance
        balance_proof: balance_proof
        unlock_height: 0
        locked: locked
        nonce: 6
        nonce_proof: nonce_proof
      properties:
        balance:
          type: string
        locked:
          type: string
        unlock_height:
          type: integer
        nonce:
          type: integer
        balance_proof:
          type: string
        nonce_proof:
          type: string
      required:
      - balance
      - balance_proof
      - locked
      - nonce
      - nonce_proof
      - unlock_height
      title: AccountDataResponse
      type: object
    post-fee-transactionschema:
      additionalProperties: false
      description: POST request for estimated fee
      properties:
        transaction_payload:
          type: string
        estimated_len:
          type: integer
      required:
      - transaction_payload
      title: TransactionFeeEstimateRequest
      type: object
    post-fee-transaction-responseschema:
      additionalProperties: false
      description: POST response for estimated fee
      example:
        cost_scalar_change_by_byte: 6.027456183070403
        estimated_cost:
          write_length: 7
          runtime: 5
          write_count: 2
          read_length: 5
          read_count: 1
        estimated_cost_scalar: 0
        estimations:
        - fee: 3.616076749251911
          fee_rate: 9.301444243932576
        - fee: 3.616076749251911
          fee_rate: 9.301444243932576
      properties:
        estimated_cost_scalar:
          type: integer
        cost_scalar_change_by_byte:
          type: number
        estimated_cost:
          $ref: '#/components/schemas/post_fee_transaction_responseschema_estimated_cost'
        estimations:
          items:
            $ref: '#/components/schemas/post_fee_transaction_responseschema_estimations_inner'
          type: array
      required:
      - estimated_cost
      - estimated_cost_scalar
      - estimated_fee_rates
      - estimated_fees
      title: TransactionFeeEstimateResponse
      type: object
    get-fee-transferschema:
      additionalProperties: false
      description: GET fee estimates
      title: CoreNodeFeeResponse
      type: string
    get-infoschema:
      additionalProperties: false
      description: GET request that core node information
      example:
        pox_consensus: pox_consensus
        stable_burn_block_height: 1
        unanchored_tip: unanchored_tip
        server_version: server_version
        burn_block_height: 6
        peer_version: 0
        network_id: 5
        stacks_tip: stacks_tip
        stacks_tip_consensus_hash: stacks_tip_consensus_hash
        parent_network_id: 5
        stacks_tip_height: 2
        stable_pox_consensus: stable_pox_consensus
        exit_at_block_height: 7
      properties:
        peer_version:
          description: "identifies the version number for the networking communication,\
            \ this should not change while a node is running, and will only change\
            \ if there's an upgrade"
          type: integer
        pox_consensus:
          description: is a hash used to identify the burnchain view for a node. it
            incorporates bitcoin chain information and PoX information. nodes that
            disagree on this value will appear to each other as forks. this value
            will change after every block
          type: string
        burn_block_height:
          description: latest bitcoin chain height
          type: integer
        stable_pox_consensus:
          description: "same as burn_consensus, but evaluated at stable_burn_block_height"
          type: string
        stable_burn_block_height:
          description: "leftover from stacks 1.0, basically always burn_block_height\
            \ - 1"
          type: integer
        server_version:
          description: is a version descriptor
          type: string
        network_id:
          description: "is similar to peer_version and will be used to differentiate\
            \ between different testnets. this value will be different between mainnet\
            \ and testnet. once launched, this value will not change"
          type: integer
        parent_network_id:
          description: "same as network_id, but for bitcoin"
          type: integer
        stacks_tip_height:
          description: "the latest Stacks chain height. Stacks forks can occur independent\
            \ of the Bitcoin chain, that height doesn't increase 1-to-1 with the Bitcoin\
            \ height"
          type: integer
        stacks_tip:
          description: the best known block hash for the Stack chain (not including
            any pending microblocks)
          type: string
        stacks_tip_consensus_hash:
          description: "the burn chain (i.e., bitcoin) consensus hash at the time\
            \ that stacks_tip was mined"
          type: string
        unanchored_tip:
          description: "the latest microblock hash if any microblocks were processed.\
            \ if no microblock has been processed for the current block, a 000..,\
            \ hex array is returned"
          type: string
        exit_at_block_height:
          description: the block height at which the testnet network will be reset.
            not applicable for mainnet
          type: integer
      required:
      - burn_block_height
      - exit_at_block_height
      - network_id
      - parent_network_id
      - peer_version
      - pox_consensus
      - server_version
      - stable_burn_block_height
      - stable_pox_consensus
      - stacks_tip
      - stacks_tip_consensus_hash
      - stacks_tip_height
      - unanchored_tip
      title: CoreNodeInfoResponse
      type: object
    get-poxschema:
      additionalProperties: false
      description: Get Proof of Transfer (PoX) information
      example:
        prepare_phase_block_length: 2
        current_cycle:
          is_pox_active: true
          min_threshold_ustx: 4
          stacked_ustx: 7
          id: 2
        contract_versions:
        - activation_burnchain_block_height: 6
          first_reward_cycle_id: 3
          contract_id: contract_id
        - activation_burnchain_block_height: 6
          first_reward_cycle_id: 3
          contract_id: contract_id
        rejection_fraction: 5
        reward_slots: 7
        contract_id: contract_id
        reward_cycle_length: 3
        rejection_votes_left_required: 9
        next_cycle:
          blocks_until_prepare_phase: 1
          ustx_until_pox_rejection: 9
          min_threshold_ustx: 1
          prepare_phase_start_block_height: 7
          blocks_until_reward_phase: 5
          stacked_ustx: 1
          min_increment_ustx: 6
          id: 1
          reward_phase_start_block_height: 4
        min_amount_ustx: 6
        total_liquid_supply_ustx: 9
        current_burnchain_block_height: 6
        pox_activation_threshold_ustx: 1
        reward_cycle_id: 9
        reward_phase_block_length: 5
        first_burnchain_block_height: 0
        prepare_cycle_length: 8
      properties:
        contract_id:
          description: The contract identifier for the PoX contract
          type: string
        first_burnchain_block_height:
          description: The first burn block evaluated in this Stacks chain
          type: integer
        current_burnchain_block_height:
          description: The latest Bitcoin chain block height
          type: integer
        pox_activation_threshold_ustx:
          description: The threshold of stacking participation that must be reached
            for PoX to activate in any cycle
          type: integer
        rejection_fraction:
          description: The fraction of liquid STX that must vote to reject PoX in
            order to prevent the next reward cycle from activating.
          type: integer
        reward_phase_block_length:
          description: The length in burn blocks of the reward phase
          type: integer
        prepare_phase_block_length:
          description: The length in burn blocks of the prepare phase
          type: integer
        reward_slots:
          description: The number of reward slots in a reward cycle
          type: integer
        total_liquid_supply_ustx:
          description: The current total amount of liquid microstacks.
          type: integer
        reward_cycle_length:
          description: The length in burn blocks of a whole PoX cycle (reward phase
            and prepare phase)
          type: integer
        current_cycle:
          $ref: '#/components/schemas/get_poxschema_current_cycle'
        next_cycle:
          $ref: '#/components/schemas/get_poxschema_next_cycle'
        reward_cycle_id:
          deprecated: true
          description: The active reward cycle number
          type: integer
        min_amount_ustx:
          deprecated: true
          type: integer
        prepare_cycle_length:
          deprecated: true
          type: integer
        rejection_votes_left_required:
          deprecated: true
          type: integer
        contract_versions:
          description: Versions of each PoX
          items:
            $ref: '#/components/schemas/get_poxschema_contract_versions_inner'
          type: array
      required:
      - contract_id
      - contract_versions
      - current_burnchain_block_height
      - current_cycle
      - first_burnchain_block_height
      - min_amount_ustx
      - next_cycle
      - pox_activation_threshold_ustx
      - prepare_cycle_length
      - prepare_phase_block_length
      - rejection_fraction
      - rejection_votes_left_required
      - reward_cycle_id
      - reward_cycle_length
      - reward_phase_block_length
      - reward_slots
      - total_liquid_supply_ustx
      title: CoreNodePoxResponse
      type: object
    post_fee_transaction_responseschema_estimated_cost:
      additionalProperties: false
      example:
        write_length: 7
        runtime: 5
        write_count: 2
        read_length: 5
        read_count: 1
      properties:
        read_count:
          type: integer
        read_length:
          type: integer
        runtime:
          type: integer
        write_count:
          type: integer
        write_length:
          type: integer
      required:
      - read_count
      - read_length
      - runtime
      - write_count
      - write_length
      type: object
    post_fee_transaction_responseschema_estimations_inner:
      example:
        fee: 3.616076749251911
        fee_rate: 9.301444243932576
      properties:
        fee_rate:
          type: number
        fee:
          type: number
      type: object
    get_poxschema_current_cycle:
      additionalProperties: false
      example:
        is_pox_active: true
        min_threshold_ustx: 4
        stacked_ustx: 7
        id: 2
      properties:
        id:
          description: The reward cycle number
          type: integer
        min_threshold_ustx:
          description: The threshold amount for obtaining a slot in this reward cycle.
          type: integer
        stacked_ustx:
          description: The total amount of stacked microstacks in this reward cycle.
          type: integer
        is_pox_active:
          description: Whether or not PoX is active during this reward cycle.
          type: boolean
      required:
      - id
      - is_pox_active
      - min_threshold_ustx
      - stacked_ustx
      type: object
    get_poxschema_next_cycle:
      additionalProperties: false
      example:
        blocks_until_prepare_phase: 1
        ustx_until_pox_rejection: 9
        min_threshold_ustx: 1
        prepare_phase_start_block_height: 7
        blocks_until_reward_phase: 5
        stacked_ustx: 1
        min_increment_ustx: 6
        id: 1
        reward_phase_start_block_height: 4
      properties:
        id:
          description: The reward cycle number
          type: integer
        min_threshold_ustx:
          description: The threshold amount for obtaining a slot in this reward cycle.
          type: integer
        stacked_ustx:
          description: The total amount of stacked microstacks in this reward cycle.
          type: integer
        min_increment_ustx:
          description: The minimum amount that can be used to submit a `stack-stx`
            call.
          type: integer
        prepare_phase_start_block_height:
          description: The burn block height when the prepare phase for this cycle
            begins. Any eligible stacks must be stacked before this block.
          type: integer
        blocks_until_prepare_phase:
          description: "The number of burn blocks until the prepare phase for this\
            \ cycle starts. If the prepare phase for this cycle already started, this\
            \ value will be negative."
          type: integer
        reward_phase_start_block_height:
          description: The burn block height when the reward phase for this cycle
            begins. Any eligible stacks must be stacked before this block.
          type: integer
        blocks_until_reward_phase:
          description: The number of burn blocks until this reward phase starts.
          type: integer
        ustx_until_pox_rejection:
          description: The remaining amount of liquid STX that must vote to reject
            the next reward cycle to prevent the next reward cycle from activating.
          type: integer
      required:
      - blocks_until_prepare_phase
      - blocks_until_reward_phase
      - id
      - min_increment_ustx
      - min_threshold_ustx
      - prepare_phase_start_block_height
      - reward_phase_start_block_height
      - stacked_ustx
      - ustx_until_pox_rejection
      type: object
    get_poxschema_contract_versions_inner:
      additionalProperties: false
      example:
        activation_burnchain_block_height: 6
        first_reward_cycle_id: 3
        contract_id: contract_id
      properties:
        contract_id:
          description: The contract identifier for the PoX contract
          type: string
        activation_burnchain_block_height:
          description: The burn block height at which this version of PoX is activated
          type: integer
        first_reward_cycle_id:
          description: The first reward cycle number that uses this version of PoX
          type: integer
      required:
      - activation_burnchain_block_height
      - contract_id
      - first_reward_cycle_id
      type: object
